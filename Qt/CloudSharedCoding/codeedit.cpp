#include "codeedit.h"
#include "qpainter.h"
#include "qscrollbar.h"
#include "ui_codeedit.h"
#include <QKeyEvent>
#include <QDebug>
#include <QTimer>
#include <QRegExp>
#include "mainwindow.h"
#include "package.h"
#include "mainwindow.h"
#include "useredittip.h"
#include <QSettings>

CodeEdit::CodeEdit(std::shared_ptr<FileInfo> fileptr, QWidget *parent) : QWidget(parent),
                                                                         ui(new Ui::CodeEdit)
{
    ui->setupUi(this);

    document = ui->textEdit->document();
    ui->textEdit->setFont(QFont("Consolas"));
    HighLighter *highLighter = new HighLighter(this, document);

    QHBoxLayout *layout = (QHBoxLayout*)this->layout();
    setLayout(layout);

    connect(document, &QTextDocument::blockCountChanged, this, &CodeEdit::updateLineNumberAreaWidth);
    connect(ui->textEdit->verticalScrollBar(), &QScrollBar::valueChanged, this, &CodeEdit::updateLineNumberArea);
    connect(ui->textEdit, &QPlainTextEdit::cursorPositionChanged, this, &CodeEdit::highlightCurrentLine);

    updateLineNumberAreaWidth();

    this->file = fileptr;

    if (MainWindow::loginState())
    {
        auto projPrivilege = MainWindow::userProjs->find(file->file_project)->pro_privilege_level;
        switch (projPrivilege)
        {
        case 1:
        {
            if (file->file_privilege <= 1)
                ui->textEdit->setReadOnly(true);
            break;
        }
        case 2:
        {
            if (file->file_privilege == 1)
            {
                ui->textEdit->setReadOnly(true);
            }
            break;
        }
        case 4:
        {
            ui->textEdit->setReadOnly(true);
            break;
        }
        default:
            break;
        }
    }

    // ÈçíÊøÜÓùêÈçñÊ†¨‰ªàÈéØÂÜ≤Âû™Áêõ?
    setUpAssociateList();
    associateWidget = new AssociateListWidget(this, ui->textEdit);
    associateWidget->hide();
    associateWidget->setMaximumHeight(fontMetrics().height() * 5);
    associateState = AssociateState::Hide;

    const int tabstop = 4;
    QFontMetrics m(ui->textEdit->font());
    ui->textEdit->setTabStopDistance(tabstop * m.horizontalAdvance(" "));

    if (MainWindow::loginState())
        connect(document, SIGNAL(contentsChange(int, int, int)), this, SLOT(docChange(int, int, int)));
}

CodeEdit::~CodeEdit()
{
    delete ui;
}

void CodeEdit::docChange(int pos, int charRemoved, int charAdded)
{
    showAssociateWidget();
    //*********************************
    QTextCursor cursor(document);
    cursor.setPosition(pos);
    cursor.setPosition(0, QTextCursor::KeepAnchor);
    QString str = cursor.selectedText();
    str.replace(QChar(8233), '\n');
    str.replace(QChar(8232), '\n');
    int size = str.toStdString().size();
    //*********************************

    QString data = QString::number(file->file_id) + "#" + QString::number(size) + "#" + QString::number(charRemoved) + "#" + file->file_path + "#" + MainWindow::userId + "#";
    qDebug() << pos << " " << charRemoved << " " << charAdded;
    for (int var = pos; var < pos + charAdded; ++var)
    {
        if (document->characterAt(var) == QChar(8233) || document->characterAt(var) == QChar(8232))
        {
            if (charRemoved == 1 && charAdded == 1)
            {
                return;
            }
            data += "\n";
        }
        else
            data += document->characterAt(var);
    }

    // ◊‘∂Ø≤π≥‰”“¿®∫≈
    QMap<QChar, QChar> map;
    map['('] = ')';
    map['['] = ']';
    map['{'] = '}';
    map['\"'] = '\"';
    map['<'] = '>';
    int preCharIndex = ui->textEdit->textCursor().position() - 1;
    QChar preChar = document->characterAt(preCharIndex);
    QString text = ui->textEdit->textCursor().block().text();
    if (preChar == '(' || preChar == '[' || preChar == '{' || preChar == '\"' || (text.contains("#include") && preChar == '<'))
    {
        ui->textEdit->insertPlainText(map[preChar]);
        data+=map[preChar];
        ui->textEdit->moveCursor(QTextCursor::PreviousCharacter);
        if (preChar == '{')
        {
            QTextCursor cursor = ui->textEdit->textCursor();
            int startPos = cursor.block().position();
            int spaceCount = 0;
            while (document->characterAt(startPos) == ' ')
            {
                spaceCount++;
                startPos++;
            }
            ui->textEdit->insertPlainText("\n");
            data+="\n";
            ui->textEdit->insertPlainText(QString(spaceCount + 4, ' '));
            data+=QString(spaceCount + 4, ' ');
            QTextBlock middleBlock = document->findBlockByLineNumber(ui->textEdit->textCursor().blockNumber());
            QTextCursor middleCursor(middleBlock);
            cursor.deleteChar();
            ui->textEdit->insertPlainText("\n");
            data+="\n";
            ui->textEdit->insertPlainText(QString(spaceCount, ' '));
            data+=QString(spaceCount + 4, ' ');
            ui->textEdit->insertPlainText("}");
            data+="}";
            middleCursor.setPosition(middleBlock.position() + spaceCount + 4);
            ui->textEdit->setTextCursor(middleCursor);
        }
    }

    qDebug() << data;
    Package pck(data.toUtf8(), (int)Package::PackageType::TEXT_CHANGE);
    MainWindow::socket->write(pck.getPdata(), pck.getSize());
    MainWindow::socket->flush();
}

void CodeEdit::addText(const QString str)
{
    document->disconnect(SIGNAL(contentsChange(int, int, int)), this, SLOT(docChange(int, int, int)));
    ui->textEdit->insertPlainText(str);
    connect(document, SIGNAL(contentsChange(int, int, int)), this, SLOT(docChange(int, int, int)));
}

void CodeEdit::changeText(int pos, int charRemoved, QString userId, QString data)
{
    QTextCursor cursor(document);
    cursor.movePosition(QTextCursor::NextCharacter, QTextCursor::MoveAnchor, pos);
    qDebug() << ui->textEdit->toPlainText().size();
    cursor.movePosition(QTextCursor::NextCharacter, QTextCursor::KeepAnchor, charRemoved);
    document->disconnect(SIGNAL(contentsChange(int, int, int)), this, SLOT(docChange(int, int, int)));
    cursor.removeSelectedText();
    cursor.insertText(data);
    connect(document, SIGNAL(contentsChange(int, int, int)), this, SLOT(docChange(int, int, int)));

    if (userWidget.contains(userId))
    {
        UserEditTip *wind = userWidget.find(userId).value();
        wind->move(ui->textEdit->cursorRect(cursor).center());
        wind->showTip();
    }
    else
    {
        UserEditTip *wind = new UserEditTip(userId, this);
        userWidget.insert(userId, wind);
        wind->move(ui->textEdit->cursorRect(cursor).center());
        wind->showTip();
    }
}

void CodeEdit::showAssociateWidget()
{
    if (associateState == AssociateState::Ignore)
        return; // ÁÄµÈÄõÁ∞¨ÈçèÂ§ãÁà£ÈçúÂ±æÊûÉÈèàÓÑÄÂΩâÈçñÊ†¶Á¨âÈçãÊ∞´Êç¢Êµ£Êõ†ÊµâÊê¥ÊóìÁ¥ùÈñ¨ÂûÆÂé§ÈóÑÂ≥∞ÂèÜÂßùËØ≤ÊÉäÔøΩÔøΩ??
    associateWidget->hide();
    associateState = AssociateState::Hide;
    QString word = this->getWordCursor();
    associateWidget->clear();
    if (!word.isEmpty())
    {
        int maxSize = 0;
        QMap<QString, int> differenceRecord;
        vector<QString> itemVec;
        foreach (const QString &keyword, associateList)
        {
            if (keyword.contains(word))
            { // Êø°ÂÇõÁÅâË§∞Êí≥Â¢†ÊùàÊí≥ÂèÜÁÄõÊ•ÉÓÉÅÁÅûÁÇ∞Á∞¨Èë±ÊóÄÂÖÇÁêõ„Ñ§ËÖëÈê®Âã´ÁìßÁªóÔ∏øË¶Ü
                itemVec.push_back(keyword);
                differenceRecord[keyword] = associateWidget->letterDifference(keyword.toStdString(), word.toStdString());
                if (keyword.length() > maxSize)
                    maxSize = keyword.length(); // ÈéµÊÉßÂüåÈë±ÊóÄÂÖÇÈçíÊ•Ñ„ÄÉÊ∂ìÓÖüÊ∏∂ÈóÄË∑®ÊÆëÊ∂ì‚Ç¨Ê∂ìÓÅéÁ¥ùÊøÇÂÄüÓÜïÁºÉÓÜø‰ªàÈéØÂÜ≤Âû™Áêõ„Ñ•ÓÜîÊê¥?
            }
        }

        if (itemVec.size() > 0)
        { // ÈèàÂ§äÂ∞ÆÈñ∞Â∂ÖÁìßÔøΩÔøΩ??
            // Èé∏Â§äÊ®äÂØÆÂÇöÂÆ≥Êµ†Â∫°Áö¨ÈçíÊùø„ÅáÈé∫ÊéûÁ¥ùÈèà‚Ç¨ÈçñÂΩíÂé§Èê®Âã´Êπ™Èèà‚Ç¨ÈçìÂ∂âÊΩ∞
            sort(itemVec.begin(), itemVec.end(), [&](const QString &s1, const QString &s2) -> bool
                 { return differenceRecord[s1] < differenceRecord[s2]; });
            foreach (const QString &item, itemVec)
            {
                associateWidget->addItem(new QListWidgetItem(item));
            }

            int x = this->getAssociateWidgetX();
            int y = ui->textEdit->cursorRect().y() + fontMetrics().height();

            associateWidget->move(x, y); // ÁíÅÂâßÁñÜÈë±ÊóÄÂÖÇÈçíÊ•Ñ„ÄÉÈê®Âã™Á∂ÖÔøΩÔøΩ??
            // ÁíÅÂâßÁñÜÈë±ÊóÄÂÖÇÈçíÊ•Ñ„ÄÉÈçöÂ†•‚Ç¨ÂÇúÊÆëÊæ∂—ÉÁö¨
            if (associateWidget->count() > 5)
                associateWidget->setFixedHeight(fontMetrics().height() * 6);
            else
                associateWidget->setFixedHeight(fontMetrics().height() * (associateWidget->count() + 1));
            associateWidget->setFixedHeight((fontMetrics().lineWidth() + 6) * maxSize);
            associateWidget->show();
            associateState = AssociateState::Showing;
            associateWidget->setCurrentRow(0, QItemSelectionModel::Select);
        }
        associateWidget->setFocus();
    }
}

QString CodeEdit::getWordCursor()
{
    QTextCursor cursor = ui->textEdit->textCursor();
    cursor.movePosition(QTextCursor::MoveOperation::StartOfWord);
    int start = cursor.position();
    QString res = "";
    QChar ch = document->characterAt(start);
    while (ch.isDigit() || ch.isLetter() || ch == '_' || ch == '#')
    {
        res.push_back(ch);
        ch = ui->textEdit->document()->characterAt(++start);
    }
    return res;
}

QString CodeEdit::getText()
{
    return ui->textEdit->toPlainText();
}

int CodeEdit::getAssociateWidgetX()
{
    QTextCursor cursor = ui->textEdit->textCursor();
    int pos = cursor.position() - 1;
    int originalPos = pos + 1;
    QChar ch = ui->textEdit->document()->characterAt(pos);
    while ((ch.isDigit() || ch.isLetter() || ch == '_' || ch == '#') && pos > 0)
    {
        ch = ui->textEdit->document()->characterAt(pos--);
    }
    pos++;
    associateState = AssociateState::Ignore;
    cursor.setPosition(pos);
    ui->textEdit->setTextCursor(cursor);
    int x = ui->textEdit->cursorRect().x() + 2 * fontMetrics().lineWidth();
    cursor.setPosition(originalPos);
    ui->textEdit->setTextCursor(cursor);
    associateState = AssociateState::Hide;
    return x;
}

void CodeEdit::keyPressEvent(QKeyEvent *event)
{
    if (event->key() == Qt::Key_Return || event->key() == Qt::Key_Enter)
    {
        if (associateState == AssociateState::Showing)
        {
            QKeyEvent *newEvent = new QKeyEvent(QEvent::KeyPress, Qt::Key_Return, Qt::NoModifier);
            QApplication::sendEvent(associateWidget, newEvent); // ÂèëÈÄÅÊ®°Êãü‰∫ã‰ª?
            return;                                             // ‰∏çË∞ÉÁî®Âü∫Á±ªÁöÑÂáΩÊï∞ÔºåÈò≤Ê≠¢ÁßªÂä®ÂÖâÊ†?
        }
    }
    else if (event->key() == Qt::Key_Down)
    {
        if (associateState == AssociateState::Showing)
        {
            QKeyEvent *newEvent = new QKeyEvent(QEvent::KeyPress, Qt::Key_Return, Qt::NoModifier);
            QApplication::sendEvent(associateWidget, newEvent); // ÂèëÈÄÅÊ®°Êãü‰∫ã‰ª?
            return;                                             // ‰∏çË∞ÉÁî®Âü∫Á±ªÁöÑÂáΩÊï∞ÔºåÈò≤Ê≠¢ÁßªÂä®ÂÖâÊ†?
        }
    }
    else if (event->key() == Qt::Key_Up)
    {
        if (associateState == AssociateState::Showing)
        {
            QKeyEvent *newEvent = new QKeyEvent(QEvent::KeyPress, Qt::Key_Return, Qt::NoModifier);
            QApplication::sendEvent(associateWidget, newEvent); // ÂèëÈÄÅÊ®°Êãü‰∫ã‰ª?
            return;                                             // ‰∏çË∞ÉÁî®Âü∫Á±ªÁöÑÂáΩÊï∞ÔºåÈò≤Ê≠¢ÁßªÂä®ÂÖâÊ†?
        }
    }
}

void CodeEdit::updateLineNumberAreaWidth()
{
    int digits = 1;
    int max = 1;
    if (document->blockCount() > 1)
    {
        max = document->blockCount();
    }
    while (max >= 10)
    {
        max /= 10;
        digits++;
    }
    int width = 8 + fontMetrics().horizontalAdvance(QLatin1Char('9')) * digits;
    ui->lineNumberArea->setMinimumWidth(width);
    ui->lineNumberArea->setMaximumWidth(width);
}

void CodeEdit::updateLineNumberArea(const int)
{
    // ∏¸–¬––∫≈«¯”Úµƒ¥π÷±πˆ∂ØŒª÷√
    ui->lineNumberArea->scroll(0, ui->textEdit->verticalScrollBar()->value());
    // ÷ÿªÊ––∫≈«¯”Ú
    ui->lineNumberArea->update();
}

void CodeEdit::highlightCurrentLine()
{
    QList<QTextEdit::ExtraSelection> extraSelections;

    if (!ui->textEdit->isReadOnly())
    {
        QTextEdit::ExtraSelection selection;
        QColor lineColor = QColor(Qt::darkGray).lighter(10);

        selection.format.setBackground(lineColor);
        selection.format.setProperty(QTextFormat::FullWidthSelection, true);
        selection.cursor = ui->textEdit->textCursor();
        selection.cursor.clearSelection();
        extraSelections.append(selection);
    }

    ui->textEdit->setExtraSelections(extraSelections);
}

void CodeEdit::resizeEvent(QResizeEvent *event)
{
    QWidget::resizeEvent(event);
}

HighLighter::HighLighter(CodeEdit *edit, QTextDocument *text) : QSyntaxHighlighter(text),
                                                                edit(edit)
{
    QSettings settings("./configs/configs.ini", QSettings::IniFormat, this);
    settings.beginGroup("CODETHEME");

    // ÈçíË∑∫ÁïæÊ•ÇÊ®πÂØíÁëôÂã´ÔøΩÔøΩ?
    HighLighterRule rule;
    this->edit = edit;

    // 1.Â®£ËØ≤ÂßûÈçèÊäΩÊï≠ÁÄõÊ•ÖÁèÆÊµúÓÜøÓùâÔøΩÔøΩ??
    keyword_format.setForeground(QColor(settings.value("KEYWORD", "#00ffff").toString())); // ÁíÅÂâßÁñÜÈçèÊäΩÊï≠ÁÄõÊ•ÄÂ¢†ÈèÖÓàûÓñÅÔøΩÔøΩ??(blue)
    keyword_format.setFontWeight(QFont::Bold);                                             // ÁíÅÂâßÁñÜÈçèÊäΩÊï≠ÁÄõÊ•ÉÊÆëÁÄõÊ§æÁ∂ãÈèçÁÖéÁ¥°(Bold)
    QVector<QString> keyword_pattern = {                                                   // \bÈç¶„Ñ®„ÄÉÁªÄÂìÑÂ¥üÁíáÂ∂ÖÁìßÁªóÔπÅÁ´üÈê£Â≤ãÁ¥ùÈóÉÂèâÓÑõÊ∏öÂ¨™ÓõßintValÊ∂îÁÜªÓù¶ÁíáÂóóÂüÜÊ∂ìÁØøntÁÄµËâ∞ÂößÊ•ÇÊ®πÂØí
                                        "\\bchar\\b", "\\bclass\\b", "\\bconst\\b", "\\bdouble\\b", "\\benum\\b", "\\bexplicit\\b",
                                        "\\bfriend\\b", "\\binline\\b", "\\bint\\b", "\\blong\\b", "\\bnamespace\\b", "\\boperator\\b",
                                        "\\bprivate\\b", "\\bprotected\\b", "\\bpublic\\b", "\\bshort\\b", "\\bsignals\\b", "\\bsigned\\b",
                                        "\\bslots\\b", "\\bstatic\\b", "\\bstruct\\b", "\\btemplate\\b", "\\btypedef\\b", "\\btypename\\b",
                                        "\\bunion\\b", "\\bunsigned\\b", "\\bvirtual\\b", "\\bvoid\\b", "\\bvolatile\\b", "\\bbool\\b",
                                        "\\busing\\b", "\\bvector\\b", "\\breturn\\b", "\\btrue\\b", "\\bfalse\\b"}; // ÈçèÊäΩÊï≠ÁÄõÊ•ÖÊ≥¶Èçö?
    // Èñ¨Â∂ÖÂ∑ªÈçèÊäΩÊï≠ÁÄõÊ•ÖÊ≥¶ÈçöÂ†¨Á¥ùÈñ´Ê∞≥ÁπÉÂßùÔΩÖÂûØÁêõ„Ñ®Êè™ÂØÆÂøöÁòëÈçíÓÇ¢ÁìßÁªóÔ∏øË¶ÜÈäÜÂÇöËãüÁíÅÊÉßÁïæÊ∂ìÁ∞âuleÈê®ÂàæatternÈîõÂ±ºÂî¨Áêõ„Ñ•Á∂ãÈçìÂ∂ÖÂèßÈñøÓÜºÁìßÈê®Âã¨Áà£ÁíáÂóôÓÉÅÈîõÊ∂òÂïÄÁíÅÊÉßÁïæruleÈê®Âã¨Áâ∏ÂØÆÂø•Á¥ùÈèà‚Ç¨ÁºÅÂ†ùÂßûÈçè„É®ÓùâÈçíÊ¨ìÊ≥¶ÈçöÂ†úËÖë
    for (auto &keyword : keyword_pattern)
    {
        rule.pattern = QRegularExpression(keyword);
        rule.format = keyword_format;
        highlighterrules.push_back(rule);
    } // ÁëôÂã´ÂûØÈóÜÂóóÊÇéÊ∂ìÓÖûÁì®Èçå„ÑßÊΩÉkeyword_patternÊ∂ìÓÖüÂ¢çÈèàÂ§äÂèßÈñøÓÜºÁìßÈê®Âã¨Áà£ÁíáÂóôÓÉÅÈçúÂ±æÁâ∏ÔøΩÔøΩ??(ÈíÉÊøäÔøΩÔøΩ? ÁªÆÊ§æÔøΩÔøΩ?)

    // 2.Â®£ËØ≤ÂßûQtÁª´Â©öÁèÆÊµúÓÜøÓùâÔøΩÔøΩ??
    class_format.setForeground(QColor(settings.value("CLASS", "#00ffff").toString())); // ÁíÅÂâßÁñÜQtÁª´ËØ≤Â¢†ÈèÖÓàùÂ£ä(darkCyan)
    class_format.setFontWeight(QFont::Bold);                                           // ÁíÅÂâßÁñÜQtÁª´ËØ≤ÁìßÊµ£Êí¥Áâ∏ÔøΩÔøΩ??(Bold)
    QString class_pattern = "\\bQ[a-zA-z]+\\b";                                        // QtÁª´ÊòèÁòëÈçíÓÇ£Áâ∏ÂØÆÂøéË¥üÊ∂ì„ÇàÁ´üÈèàÂ§äÂûéÈóÖÊóÇÓÉÅÈîõÂ±ºÁ¨ñÊµ†ÓôóÂØÆ‚Ç¨Êæ∂ÂØ∏ÊÆëÈéµ‚Ç¨ÈèàÂ§éÂ´≥ÈèÇÂõßÁìßÁªóÔ∏øÔøΩÔøΩ?
    rule.pattern = QRegularExpression(class_pattern);
    rule.format = class_format;
    highlighterrules.push_back(rule);

    // 3.Â®£ËØ≤ÂßûÊæ∂Â≠òÊûÉÊµ†Â†ïÁèÆÊµúÓÜΩÁâ∏ÔøΩÔøΩ??
    // 3.1 #ÂØÆ‚Ç¨ÔøΩÔøΩ??
    headfile_format.setForeground(QColor(settings.value("HEADER", "#00ffff").toString()));
    headfile_format.setFontWeight(QFont::Bold);
    rule.format = headfile_format;
    rule.pattern = QRegularExpression("#.*");
    highlighterrules.push_back(rule);

    // 3.2 ÈçöÂã´„ÅîÈèÇÂõ¶Ê¨¢
    headfile_format.setForeground(QColor(settings.value("HEADER", "#00ffff").toString()));
    headfile_format.setFontWeight(QFont::Bold);
    QVector<QString> headfile_pattern = {
        "<algorithm>", "<bitset>", "<cctype>", "<cerrno>", "<cerrno>", "<cerrno>",
        "\\b<?complex>?\\b", "<cstdio>", "<cstdlib>", "\\b<?cstring>?\\b", "<ctime>", "\\b<?deque>?\\b",
        "\\b<?exception>?\\b", "\\b<?fstream>?\\b", "\\b<?limits>?\\b", "\\b<?list>?\\b", "\\b<?map>?\\b", "<iomanip>", "<ios>",
        "<iosfwd>", "<iostream>", "\\b<?istream>?\\b", "\\b<?ostream>?\\b", "\\b<?queue>?\\b", "\\b<?set>?\\b",
        "\\b<?sstream>?\\b", "\\b<?stack>?\\b", "<stdexcept>", "<streambuf>", "<string>", "<utility>",
        "\\b<?vector>?\\b", "\\b<?cwchar>?\\b", "\\b<?cwctype>?\\b"};
    rule.format = headfile_format;
    for (auto &pattern : headfile_pattern)
    {
        rule.pattern = QRegularExpression(pattern);
        highlighterrules.push_back(rule);
    }

    // 4.Â®£ËØ≤ÂßûÊæ∂Ê∞≥ÓîëÂ®â„Ñ©Âô¥Ê•ÇÊ®πÂØíÁëôÂã´ÔøΩÔøΩ?
    // Êæ∂Ê∞≥ÓîëÂ®â„Ñ©Âô¥Èê®Âã´Â∞ÆÈñ∞Â∂ÜÓÑúÈçíÊ¨í„ÄÉÊùàÊÉßÁ¥°
    QString comment_start_pattern = "/\\*"; // ÂØÆ‚Ç¨ÊøÆÂ¨©Á∂ÖÁºÉÔøΩÔøΩ?*ÈîõÂ±ΩÊ¥úÊ∂ìÁÉòÓÑúÈçíÊ¨í„ÄÉÊùàÊÉßÁ¥°ÔøΩÔøΩ??*Èóá‚Ç¨Áëï‰Ω∫Êï§\*Áêõ„Ñ®Êè™ÈîõÂ≤É‚Ç¨ÔøΩÔøΩ?*Èóá‚Ç¨Áëï‰Ω∏ÁìßÁªóÔ∏øË¶ÜÈê¢‚ïò\*Áêõ„Ñ®ÔøΩÔøΩ?
    comment_start = QRegularExpression(comment_start_pattern);
    QString comment_end_pattern = "\\*/"; // ÁºÅÊí¥ÊΩ´Êµ£Â∂áÁñÜ
    comment_end = QRegularExpression(comment_end_pattern);

    // 5.Â®£ËØ≤ÂßûÂØÆÊõûÂΩøÊ•ÇÊ®πÂØíÁëôÂã´ÂûØ
    quotation_format.setForeground(QColor(settings.value("QUATATION", "#00ffff").toString())); // ÂØÆÊõûÂΩøÈçêÂë≠ÓÜêÊ£∞ÊªÜÔøΩÔøΩ?(cyan)
    QString quotation_pattern = "\".*\"";
    rule.pattern = QRegularExpression(quotation_pattern);
    rule.format = quotation_format;
    highlighterrules.push_back(rule);

    // 6.Â®£ËØ≤ÂßûÈçëËä•ÊöüÊ•ÇÊ®πÂØíÈèçÁÖéÁ¥°
    function_format.setForeground(QColor(settings.value("FUNCTION", "#00ffff").toString())); // ÈçëËä•ÊöüÁÄõÊ§æÁ∂ãÊ£∞ÊªÜÂ£äÁíÅÂâßÁñÜÊ∂ìÁØ∏arkGreen
    function_format.setFontWeight(QFont::Bold);                                              // ÈçëËä•ÊöüÁÄõÊ§æÁ∂ãÈèçÁÖéÁ¥°ÁíÅÂâßÁñÜÊ∂ìÁØâold
    QString function_pattern = "\\b[a-zA-Z0-9_]+(?=\\()";                                    // ÈçëËä•ÊöüÈçöÂ∂ÖÂΩ≤Êµ†„É¶Êß∏Êæ∂—ÉÁö¨ÈçêÊ¨íÂ´≥ÈèÇÂõßÁìßÁªóÔ∏∫‚Ç¨‰ΩπÊöüÁÄõÊ§º‚Ç¨‰Ω∑Á¨ÖÈçíÊéîÂöéÈîõÂ±ΩÂèæÊ∂ìÓÖ®Á¥ù(?=\\()Áêõ„Ñß„ÅöÈçöÂ∫®ÊΩ∞ËπáÂë¥„ÄèÁí∫ÁÜ∫ÊΩÉÊ∂ì‚Ç¨Ê∂ìÓÅÑ‰πèÈé∑ÓÑÄÂΩøÈîõÂ±ºÁµæÈèÑÓàùÁπñÊ∂ìÓÅÑ‰πèÈé∑ÓÑÄÂΩøÊ∂ìÂ∂ÑÁ¥∞ÁêöÓÇ¢Â∞ÆÈñ∞Â∂ÖÂüå
    rule.pattern = QRegularExpression(function_pattern);
    rule.format = function_format;
    highlighterrules.push_back(rule);

    // 7.Â®£ËØ≤ÂßûÈçíÂóòÊïÆÊ•ÇÊ®πÂØíÈèçÁÖéÁ¥°
    branch_format.setForeground(QColor(settings.value("BRANCH", "#00ffff").toString()));
    branch_format.setFontWeight(QFont::Bold);
    QVector<QString> branch_pattern = {
        "if", "else", "switch", "case", "while", "for"};
    rule.format = branch_format;
    for (QString &pattern : branch_pattern)
    {
        rule.pattern = QRegularExpression(pattern);
        highlighterrules.push_back(rule);
    }

    // 8.Â®£ËØ≤ÂßûÊùàÊí≥ÂèÜÊùàÊí≥Âö≠Ê•ÇÊ®πÂØíÈèçÁÖéÔøΩÔøΩ?
    cincout_format.setForeground(QColor(settings.value("STDIO", "#00ffff").toString()));
    cincout_format.setFontWeight(QFont::Bold);
    QVector<QString> cincout_pattern = {
        "cin", "cout", "std", "endl", "<<", ">>"};
    rule.format = cincout_format;
    for (auto &pattern : cincout_pattern)
    {
        rule.pattern = QRegularExpression(pattern);
        highlighterrules.push_back(rule);
    }

    // 9.Â®£ËØ≤ÂßûÈçóÊõ°ÓîëÂ®â„Ñ©Âô¥Ê•ÇÊ®πÂØíÁëôÂã´ÔøΩÔøΩ?
    singleLine_comment_format.setForeground(QColor(settings.value("SIGNLE_LINE_COMMENT", "#00ffff").toString()));
    singleLine_comment_format.setFontWeight(QFont::Bold);
    QString singleLine_comment_pattern = "//[^\n]*"; // ÈçóÊõ°ÓîëÂ®â„Ñ©Âô¥ÁíáÂóóÂüÜÈèçÁÖéÁ¥°Ê∂ìÈ∏øÁ™°Èç¶?//ÈçöÂ∫ØÁ¥ùÊµ£ÂóïÁ¨âÈçñÂëÆÂ´≠Èéπ„à£ÓîëÁªóÔ∏ºÁ¥ùÊ∂ìÊñæÁ¨âÈóá‚Ç¨Áëï‰æÄÊ£øÈóÖÊóÇÓÉÅ
    rule.pattern = QRegularExpression(singleLine_comment_pattern);
    rule.format = singleLine_comment_format;
    highlighterrules.push_back(rule);

    // Êæ∂Ê∞≥ÓîëÂ®â„Ñ©Âô¥ÈèçÁÖéÔøΩÔøΩ?
    multiLine_comment_format.setForeground(QColor(settings.value("MULITLINE_COMMENT", "#00ffff").toString()));
    multiLine_comment_format.setFontWeight(QFont::Bold);

    settings.endGroup();
}

void HighLighter::highlightBlock(const QString &text)
{ // Êê¥ÊóÇÊï§Ê•ÇÊ®πÂØíÁëôÂã´ÔøΩÔøΩ?
    foreach (const HighLighterRule &rule, highlighterrules)
    {
        QRegularExpressionMatchIterator matchIterator = rule.pattern.globalMatch(text); // Èç¶„Ñ¶Êö£Ê∂ìÁåºextÈèÇÂõ®Êπ∞Ê∂ìÓÖûÂ∞ÆÈñ∞Â∂ÖÁ∂ãÈçìÂ≥≥uleÈê®Âàæattern
        while (matchIterator.hasNext())
        { // Ê•ÇÊ®πÂØíÈèÅÁø†ÈáúÈèÇÂõ®Êπ∞Ê∂ìÓÖûÂ∞ÆÈñ∞Â∂ÖÂüåÈê®Âã´ÁìßÔøΩÔøΩ??
            QRegularExpressionMatch match = matchIterator.next();
            setFormat(match.capturedStart(), match.capturedLength(), rule.format); //(ÈçñÂΩíÂé§ÈçíÊâÆÊÆëÁíßÂ≥∞ÓùêÊµ£Â∂áÁñÜÈîõÂ±æÊûÉÈèàÓÑÄÊΩ°ÈóÄÂûÆÂÆ≥ÈîõÂ≤ÑÁèÆÊµúÓÜøÓùâÈçíÊ¨êÁâ∏ÂØÆ?)
        }
    }

    // Êæ∂Âã≠ÊÇäÊæ∂Ê∞≥ÓîëÂ®â„Ñ©Âô¥ÈîõÂ≤ÄÊï±ÊµúÂ∫°ÓòøÁêõÂ±æÊïûÈñ≤Â©ÅÁ¥≠ÈçèÂ†¢È™áÈèà‚Ç¨Ê•ÇÊ©àÁ¥ùÈéµ‚Ç¨Êµ†„É¶Ê∏∂ÈçöÂ∫°Óò©ÔøΩÔøΩ??
    setCurrentBlockState(0);
    int start = 0;
    if (previousBlockState() != 1)
    {                                        // Ê∂ìÂ©ÅÁ´¥Ê∂ìÓÅÖÊûÉÈèàÓÑÄÊΩ°Ê∂ìÂ∂ÜÊß∏Êæ∂Ê∞≥ÓîëÂ®â„Ñ©Âô¥Èê®Âã¨ÊûÉÈèàÓÑÄÂî¥ÁÄπÁô∏Á¥ùÊø°ÂÇõÁÅâÈèÑÓà§Á¥ùÈèÇÂõ®Êπ∞ÈêòËàµ‚Ç¨‰Ω∏Á∞≤ÁíÅÂâßÁñÜÔøΩÔøΩ??1
        start = text.indexOf(comment_start); // ÈçèÂ†ùÁïæÊµ£Â∂ÖÂüåÁªóÓÉøÁ´¥Ê∂ìÓÅÑÓòøÁêõÂ±æÊïûÈñ≤Â©ÑÊÆëÁíßÂ≥∞ÓùêÁÄõÊ•ÉÓÉÅÈîõÂ±æÂ£òÈçíÊãåÁπëÈç•ÁÇ∞Á∂ÖÁºÉÓáÜÁ¥ùÂ®å‚ÑÉÂ£òÈçíÊãåÁπëÈç•?-1
    }
    while (start >= 0)
    {
        QRegularExpressionMatch match = comment_end.match(text, start); // Êµ†Â∫°Á∂ãÈçìÂ∂àÊç£ÊøÆÂ¨™ÁìßÁªóÔπÄÂ∞ÆÈñ∞Â∂áÓÉáÊ∂ì‚Ç¨Ê∂ìÓÅÜÁ≤®ÈèâÁÜ∑ÁìßÁªóÔ∏ºÁ¥ùÈçóÂÜ≤Á∂ãÈçìÂ∂ÖÓòøÁêõÂ±æÊïûÈñ≤Â©ÑÊÆëÈé¥ÓÅÖÓÑõÁÄõÊ•ÉÔøΩÔøΩ?
        int end = match.capturedStart();                                // matchÁÄµÁë∞Á∞≤comment_endÈîõÂ±æÓÑùÈèÉËàµÂ£òÈê®Âã¨Êß∏Êµ†Â∫°Á∂ãÈçìÂ≥¥tart(Êæ∂Ê∞≥ÓîëÂ®â„Ñ©Âô¥ÁíßÂ≥∞ÓùêÁÄõÊ•ÉÔøΩÔøΩ?)ÂØÆ‚Ç¨ÊøÆÂ¨™Â∞ÆÈñ∞Â∂áÊÆëÁªóÓÉøÁ´¥Ê∂ìÓÅÜÁ≤®ÈèâÁÜ∑ÁìßÁªó?
        int length = 0;
        if (end == -1)
        { // ÈéµÂè•Á¨âÈçíÊâÆÁ≤®ÈèâÁÜ∑ÁìßÁªóÔ∏ºÁ¥ùÁíáÂ≠òÊßëÈèÑÓàõÊ∏∂ÈçöÂ∫ùÁ´¥Ê∂ìÓÅÑÓòøÁêõÂ±æÊïûÈñ≤Â©èÁ¥ùÊ∂ìËΩ∞Á∞°ÁíÅ‚ïÄÁ¨ÖÊ∂ì‚Ç¨Ê∂ìÓÅÖÊûÉÈèàÓÑÄÊΩ°Èê≠„É©‰∫æÊ∂îÂ¨™Â¢†ÈèÑÓàöÓòøÁêõÂ±æÊïûÈñ≤Â©ÉƒÅÈçßÊ•ãÁ¥ùÈéµ‚Ç¨Êµ†„É®ÓÜïÈêòËàµ‚Ç¨‰Ω∑Ë¥ü1ÈîõÂ≤ÄÂäßÈçöÂ∫£Á≤®ÈèâÁÜ∂Á∂ÖÁºÉÓÜªÁ¨åÈèÇÂõ®Êπ∞ÁºÅÊí¥ÊΩ´Êµ£Â∂áÁñÜÈê©Á®øÊÇì
            setCurrentBlockState(1);
            length = text.length() - start;
        }
        else
        {
            length = end - start + match.capturedLength(); // Èóá‚Ç¨Áëï‰æÄÁèÆÊµúÓÜæÊÆëÈèÇÂõ®Êπ∞ÈóÄÂûÆÂÆ≥ÔøΩÔøΩ?? ÁºÅÊí¥ÊΩ´ÁÄõÊ•ÉÓÉÅÊ∂ìÂ¨´Áà£-ÁíßÂ≥∞ÓùêÁÄõÊ•ÉÓÉÅÊ∂ìÂ¨´Áà£+ÈçñÂΩíÂé§ÈçíÊâÆÊÆëÈèÇÂõ®ÔøΩÔøΩ?(*/)Èê®ÂãØÊö±Êê¥?
        }
        setFormat(start, length, multiLine_comment_format);
        start = text.indexOf(comment_start, start + length); // Êµ†Â∫°Á∂ãÈçìÂ≥¥tart+lengthÂØÆ‚Ç¨ÊøÆÂ¨™Â∞ÆÈñ∞Â∂ÑÁ¨ÖÊ∂ì‚Ç¨Ê∂ìÁåªtart
    }
}

void setUpAssociateList()
{
    associateList << "char"
                  << "class"
                  << "const"
                  << "double"
                  << "enum"
                  << "explicit"
                  << "friend"
                  << "inline"
                  << "int"
                  << "long"
                  << "namespace"
                  << "operator"
                  << "private"
                  << "protected"
                  << "public"
                  << "short"
                  << "signals"
                  << "signed"
                  << "slots"
                  << "static"
                  << "struct"
                  << "template"
                  << "typedef"
                  << "typename"
                  << "union"
                  << "unsigned"
                  << "virtual"
                  << "void"
                  << "volatile"
                  << "bool"
                  << "using"
                  << "constexpr"
                  << "sizeof"
                  << "if"
                  << "for"
                  << "foreach"
                  << "while"
                  << "do"
                  << "case"
                  << "break"
                  << "continue"
                  << "template"
                  << "delete"
                  << "new"
                  << "default"
                  << "try"
                  << "return"
                  << "throw"
                  << "catch"
                  << "goto"
                  << "else"
                  << "extren"
                  << "this"
                  << "switch"
                  << "include <>"
                  << "include \"\""
                  << "define"
                  << "iostream";
}

AssociateListWidget::AssociateListWidget(CodeEdit *edit, QWidget *parent) : QListWidget(parent),
                                                                            edit(edit)
{
    p = (QPlainTextEdit *)parent;
    backgroundColor = Qt::lightGray;
    highlightColor.setRgb(22, 165, 248);
    QPalette palette = this->palette();
    palette.setColor(QPalette::Active, QPalette::Highlight, highlightColor);
    palette.setColor(QPalette::Inactive, QPalette::Highlight, highlightColor);
    palette.setColor(QPalette::Active, QPalette::Base, backgroundColor);
    palette.setColor(QPalette::Inactive, QPalette::Base, backgroundColor);
    palette.setColor(QPalette::Text, Qt::white);
    this->setPalette(palette);
}

int AssociateListWidget::letterDifference(const std::string source, const std::string text)
{
    int difference = 0;
    for (int i = 0; i < source.length(); i++)
    {
        if (i < text.length())
            difference += abs(text[i] - source[i]);
        else
        {
            if (difference == 0)
            {
                return strToInt(source.substr(i, source.length() - i));
            }
            difference += source[i];
        }
    }
    return difference;
}

int AssociateListWidget::strToInt(string str)
{
    int res = 0;
    for (int i = 0; i < str.length(); i++)
    {
        res += str[i] - 'a';
    }
    return res;
}

void AssociateListWidget::keyPressEvent(QKeyEvent *event)
{
    if (event->key() == Qt::Key_Return || event->key() == Qt::Key_Enter)
    {
        // Ëé∑ÂèñÂΩìÂâçÈÄâ‰∏≠ÁöÑÈ°π
        QListWidgetItem *item = currentItem();
        if (item)
        {
            QString text = this->currentItem()->text();
            QString word = edit->getWordCursor();
            for (int i = 0; i < word.length(); i++)
            {
                edit->ui->textEdit->textCursor().deletePreviousChar();
            }
            edit->ui->textEdit->insertPlainText(text);
        }
        this->hide();
        edit->ui->textEdit->setFocus();
    }
    else if (event->key() == Qt::Key_Down)
    {
        if (this->currentRow() < this->count() - 1)
        {
            this->setCurrentRow(this->currentRow() + 1);
        }
    }
    else if (event->key() == Qt::Key_Up)
    {
        if (this->currentRow() > 0)
        {
            this->setCurrentRow(this->currentRow() - 1);
        }
    }
    else
    {
        event->ignore();
    }
}
